@page "/"
@using Quantum.Data.Model;
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.SignalR;
@inject Quantum.Data.Interfaces.INoteService noteService
@inject NavigationManager Navigation
@implements IAsyncDisposable
<PageTitle>Notes</PageTitle>

<h1>POST YOUR NOTE!</h1>

<EditForm class="" Model="@Model" OnSubmit="@Submit">
    <div class="form-group text-center">
        <label class="justify-content-center" for="header">Header</label>
        <InputText id="header" class="form-control" @bind-Value="Model.Header" />
    </div>
    <div class="form-group text-center">
        <label class="justify-content-center" for="content">Content</label>
        <InputTextArea id="content" class="form-control" @bind-Value="Model.Content" />
    </div>
    <span></span>
    <button class="btn btn-primary my-2" type="submit" disabled="@(!IsConnected)">Submit</button>
</EditForm>


@foreach (var note in noteService.GetAll().Reverse())
{
    <NoteComponent note="@note" />
}




@code {
    public Note Model { get; set; }
    private HubConnection hubConnection;
    protected async override Task OnInitializedAsync()
    {
        Model ??= new Note();
        var hubConnectionBuilder = new HubConnectionBuilder();
        hubConnection = hubConnectionBuilder.WithUrl(
            Navigation.ToAbsoluteUri("/NoteHub")).Build();
        hubConnection.On("RecieveNote", () =>
        {
            InvokeAsync(StateHasChanged);
        });
        if (hubConnection?.State == HubConnectionState.Disconnected)
            await hubConnection.StartAsync();
    }
    private async Task Submit()
    {
        if (hubConnection is not null)
        {
            if (Model is not null)
            {
                noteService.Add(Model.Header, Model.Content);
            }
            await hubConnection.SendAsync("SendNote");
        }
    }
    public bool IsConnected =>
    hubConnection?.State == HubConnectionState.Connected;
    
    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
    }

